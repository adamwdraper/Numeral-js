/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */
(function(){/************************************
        Constructors
    ************************************/
// Numeral prototype object
function a(a){this._value=a}/**
     * Implementation of toFixed() that treats floats more like decimals
     *
     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
     * problems for accounting- and finance-related software.
     */
function b(a,b,c,d){var e,f,g=Math.pow(10,b);
//roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
// Multiply up by precision, round accurately, then divide and use native toFixed():
return f=(c(a*g)/g).toFixed(b),d&&(e=new RegExp("0{1,"+d+"}$"),f=f.replace(e,"")),f}/************************************
        Formatting
    ************************************/
// determine what type of formatting we need to do
function c(a,b,c){var d;
// return string
// figure out what kind of format we are dealing with
// currency!!!!!
return d=b.indexOf("$")>-1?e(a,b,c):b.indexOf("%")>-1?f(a,b,c):b.indexOf(":")>-1?g(a,b):i(a._value,b,c)}
// revert to number
function d(a,b){var c,d,e,f,g,i=b,j=["KB","MB","GB","TB","PB","EB","ZB","YB"],k=!1;if(b.indexOf(":")>-1)a._value=h(b);else if(b===q)a._value=0;else{
// see if bytes are there so that we can multiply to the correct number
for("."!==o[p].delimiters.decimal&&(b=b.replace(/\./g,"").replace(o[p].delimiters.decimal,".")),
// see if abbreviations are there so that we can multiply to the correct number
c=new RegExp("[^a-zA-Z]"+o[p].abbreviations.thousand+"(?:\\)|(\\"+o[p].currency.symbol+")?(?:\\))?)?$"),d=new RegExp("[^a-zA-Z]"+o[p].abbreviations.million+"(?:\\)|(\\"+o[p].currency.symbol+")?(?:\\))?)?$"),e=new RegExp("[^a-zA-Z]"+o[p].abbreviations.billion+"(?:\\)|(\\"+o[p].currency.symbol+")?(?:\\))?)?$"),f=new RegExp("[^a-zA-Z]"+o[p].abbreviations.trillion+"(?:\\)|(\\"+o[p].currency.symbol+")?(?:\\))?)?$"),g=0;g<=j.length&&!(k=b.indexOf(j[g])>-1&&Math.pow(1024,g+1));g++);
// do some math to create our number
a._value=(k?k:1)*(i.match(c)?Math.pow(10,3):1)*(i.match(d)?Math.pow(10,6):1)*(i.match(e)?Math.pow(10,9):1)*(i.match(f)?Math.pow(10,12):1)*(b.indexOf("%")>-1?.01:1)*((b.split("-").length+Math.min(b.split("(").length-1,b.split(")").length-1))%2?1:-1)*Number(b.replace(/[^0-9\.]+/g,"")),
// round if we are talking about bytes
a._value=k?Math.ceil(a._value):a._value}return a._value}function e(a,b,c){var d,e,f=b.indexOf("$"),g=b.indexOf("("),h=b.indexOf("-"),j="";
// check for space before or after currency
// format the number
// position the symbol
// the symbol appears before the "(" or "-"
return b.indexOf(" $")>-1?(j=" ",b=b.replace(" $","")):b.indexOf("$ ")>-1?(j=" ",b=b.replace("$ ","")):b=b.replace("$",""),e=i(a._value,b,c),f<=1?e.indexOf("(")>-1||e.indexOf("-")>-1?(e=e.split(""),d=1,(f<g||f<h)&&(d=0),e.splice(d,0,o[p].currency.symbol+j),e=e.join("")):e=o[p].currency.symbol+j+e:e.indexOf(")")>-1?(e=e.split(""),e.splice(-1,0,j+o[p].currency.symbol),e=e.join("")):e=e+j+o[p].currency.symbol,e}function f(a,b,c){var d,e="",f=100*a._value;
// check for space before %
return b.indexOf(" %")>-1?(e=" ",b=b.replace(" %","")):b=b.replace("%",""),d=i(f,b,c),d.indexOf(")")>-1?(d=d.split(""),d.splice(-1,0,e+"%"),d=d.join("")):d=d+e+"%",d}function g(a){var b=Math.floor(a._value/60/60),c=Math.floor((a._value-60*b*60)/60),d=Math.round(a._value-60*b*60-60*c);return b+":"+(c<10?"0"+c:c)+":"+(d<10?"0"+d:d)}function h(a){var b=a.split(":"),c=0;
// turn hours and minutes into seconds and add them all up
// hours
// minutes
// seconds
// minutes
// seconds
return 3===b.length?(c+=60*Number(b[0])*60,c+=60*Number(b[1]),c+=Number(b[2])):2===b.length&&(c+=60*Number(b[0]),c+=Number(b[1])),Number(c)}function i(a,c,d){var e,f,g,h,i,j,k=!1,l=!1,m=!1,n="",r=!1,// force SI to piko-
s=!1,// force SI to nano-
t=!1,// force SI to micro-
u=!1,// force SI to mili-
v=!1,// force SI to kilo-
w=!1,// force SI to Mega-
x=!1,// force SI to Giga-
y=!1,// force SI to Tera-
z=!1,// force SI to Peta-
A=!1,// force SI
B="",C=!1,// force abbreviation to thousands
D=!1,// force abbreviation to millions
E=!1,// force abbreviation to billions
F=!1,// force abbreviation to trillions
G=!1,// force abbreviation
H="",I="",J=Math.abs(a),K=["B","KB","MB","GB","TB","PB","EB","ZB","YB"],L="",M=!1;
// check if number is zero and a custom zero format has been set
if(0===a&&null!==q)return q;
// see if we are formatting bytes
if(
// see if we should use parentheses for negative number or if we should prefix with a sign
// if both are present we default to parentheses
c.indexOf("(")>-1?(k=!0,c=c.slice(1,-1)):c.indexOf("+")>-1&&(l=!0,c=c.replace(/\+/g,"")),
// see if SI prefix is wanted
c.indexOf("s")>-1&&(
// check if SI prefix is specified
r=c.indexOf("sp")>=0,s=c.indexOf("sn")>=0,t=c.indexOf("su")>=0,u=c.indexOf("sm")>=0,v=c.indexOf("sK")>=0,w=c.indexOf("sM")>=0,x=c.indexOf("sG")>=0,y=c.indexOf("sT")>=0,z=c.indexOf("sP")>=0,A=r||s||t||u||v||w||x||y||z,
// check for space before SI prefix
c.indexOf(" s")>-1?(n=" ",c=c.replace(/ s[pnumKMGTP]?/,"")):c=c.replace(/s[pnumKMGTP]?/,""),J>=Math.pow(10,15)&&!A||z?(
// Peta-
n+="P",a/=Math.pow(10,15)):J<Math.pow(10,15)&&J>=Math.pow(10,12)&&!A||y?(
// Tera-
n+="T",a/=Math.pow(10,12)):J<Math.pow(10,12)&&J>=Math.pow(10,9)&&!A||x?(
// Giga-
n+="G",a/=Math.pow(10,9)):J<Math.pow(10,9)&&J>=Math.pow(10,6)&&!A||w?(
// Mega-
n+="M",a/=Math.pow(10,6)):J<Math.pow(10,6)&&J>=Math.pow(10,3)&&!A||v?(
// kilo-
n+="k",a/=Math.pow(10,3)):J<1&&J>=Math.pow(10,-3)&&!A||u?(
// mili-
n+="m",a/=Math.pow(10,-3)):J<Math.pow(10,-3)&&J>=Math.pow(10,-6)&&!A||t?(
// micro-
n+="Âµ",a/=Math.pow(10,-6)):J<Math.pow(10,-6)&&J>=Math.pow(10,-9)&&!A||s?(
// nano-
n+="n",a/=Math.pow(10,-9)):(J<Math.pow(10,-9)&&!A||r)&&(
// piko-
n+="p",a/=Math.pow(10,-12))),
// see if abbreviation is wanted
c.indexOf("a")>-1&&(
// check if abbreviation is specified
C=c.indexOf("aK")>=0,D=c.indexOf("aM")>=0,E=c.indexOf("aB")>=0,F=c.indexOf("aT")>=0,G=C||D||E||F,
// check for space before abbreviation
c.indexOf(" a")>-1?(B=" ",c=c.replace(" a","")):c=c.replace("a",""),J>=Math.pow(10,12)&&!G||F?(
// trillion
B+=o[p].abbreviations.trillion,a/=Math.pow(10,12)):J<Math.pow(10,12)&&J>=Math.pow(10,9)&&!G||E?(
// billion
B+=o[p].abbreviations.billion,a/=Math.pow(10,9)):J<Math.pow(10,9)&&J>=Math.pow(10,6)&&!G||D?(
// million
B+=o[p].abbreviations.million,a/=Math.pow(10,6)):(J<Math.pow(10,6)&&J>=Math.pow(10,3)&&!G||C)&&(
// thousand
B+=o[p].abbreviations.thousand,a/=Math.pow(10,3))),c.indexOf("b")>-1)for(
// check for space before
c.indexOf(" b")>-1?(H=" ",c=c.replace(" b","")):c=c.replace("b",""),g=0;g<=K.length;g++)if(e=Math.pow(1024,g),f=Math.pow(1024,g+1),a>=e&&a<f){H+=K[g],e>0&&(a/=e);break}
// see if ordinal is wanted
// check for space before
// format number
return c.indexOf("o")>-1&&(c.indexOf(" o")>-1?(I=" ",c=c.replace(" o","")):c=c.replace("o",""),I+=o[p].ordinal(a)),c.indexOf("[.]")>-1&&(m=!0,c=c.replace("[.]",".")),h=a.toString().split(".")[0],i=c.split(".")[1],j=c.indexOf(","),i?(i.indexOf("[")>-1?(i=i.replace("]",""),i=i.split("["),L=b(a,i[0].length+i[1].length,d,i[1].length)):L=b(a,i.length,d),h=L.split(".")[0],L=L.split(".")[1].length?o[p].delimiters.decimal+L.split(".")[1]:"",m&&0===Number(L.slice(1))&&(L="")):h=b(a,null,d),h.indexOf("-")>-1&&(h=h.slice(1),M=!0),j>-1&&(h=h.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1"+o[p].delimiters.thousands)),0===c.indexOf(".")&&(h=""),(k&&M?"(":"")+(!k&&M?"-":"")+(!M&&l?"+":"")+h+L+(I?I:"")+(n?n:"")+(B?B:"")+(H?H:"")+(k&&M?")":"")}/************************************
        Helpers
    ************************************/
function j(a,b){o[a]=b}/**
     * Computes the multiplier necessary to make x >= 1,
     * effectively eliminating miscalculations caused by
     * finite precision.
     */
function k(a){var b=a.toString().split(".");return b.length<2?1:Math.pow(10,b[1].length)}/**
     * Given a variable number of arguments, returns the maximum
     * multiplier that must be used to normalize an operation involving
     * all of them.
     */
function l(){var a=Array.prototype.slice.call(arguments);return a.reduce(function(a,b){var c=k(a),d=k(b);return c>d?c:d},-(1/0))}/************************************
        Constants
    ************************************/
var m,n="1.5.3",
// internal storage for language config files
o={},p="en",q=null,r="0,0",
// check for nodeJS
s="undefined"!=typeof module&&module.exports;/************************************
        Top Level Functions
    ************************************/
m=function(b){return m.isNumeral(b)?b=b.value():0===b||"undefined"==typeof b?b=0:Number(b)||(b=m.fn.unformat(b)),new a(Number(b))},
// version number
m.version=n,
// compare numeral object
m.isNumeral=function(b){return b instanceof a},
// This function will load languages and then set the global language.  If
// no arguments are passed in, it will simply return the current global
// language key.
m.language=function(a,b){if(!a)return p;if(a=a.toLowerCase(),a&&!b){if(!o[a])throw new Error("Unknown language : "+a);p=a}return!b&&o[a]||j(a,b),m},
// This function provides access to the loaded language data.  If
// no arguments are passed in, it will simply return the current
// global language object.
m.languageData=function(a){if(!a)return o[p];if(!o[a])throw new Error("Unknown language : "+a);return o[a]},m.language("en",{delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},ordinal:function(a){var b=a%10;return 1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th"},currency:{symbol:"$"}}),m.zeroFormat=function(a){q="string"==typeof a?a:null},m.defaultFormat=function(a){r="string"==typeof a?a:"0.0"},m.validate=function(a,b){var c,d,e,f,g,h,i,j;
//if val is just digits return true
if(
//coerce val to string
"string"!=typeof a&&(a+="",console.warn&&console.warn("Numeral.js: Value is not string. It has been co-erced to: ",a)),
//trim whitespaces from either sides
a=a.trim(),a.match(/^\d+$/))return!0;
//if val is empty return false
if(""===a)return!1;
//get the decimal and thousands separator from numeral.languageData
try{
//check if the culture is understood by numeral. if not, default it to current language
i=m.languageData(b)}catch(a){i=m.languageData(m.language())}
//setup the delimiters and currency symbol based on culture/language
// validating currency symbol
//validating abbreviation symbol
return e=i.currency.symbol,g=i.abbreviations,c=i.delimiters.decimal,d="."===i.delimiters.thousands?"\\.":i.delimiters.thousands,j=a.match(/^[^\d]+/),(null===j||(a=a.substr(1),j[0]===e))&&(j=a.match(/[^\d]+$/),(null===j||(a=a.slice(0,-1),j[0]===g.thousand||j[0]===g.million||j[0]===g.billion||j[0]===g.trillion))&&(h=new RegExp(d+"{2}"),!a.match(/[^\d.,]/g)&&(f=a.split(c),!(f.length>2)&&(f.length<2?!!f[0].match(/^\d+.*\d$/)&&!f[0].match(h):1===f[0].length?!!f[0].match(/^\d+$/)&&!f[0].match(h)&&!!f[1].match(/^\d+$/):!!f[0].match(/^\d+.*\d$/)&&!f[0].match(h)&&!!f[1].match(/^\d+$/)))))},/************************************
        Floating-point helpers
    ************************************/
// The floating-point helper functions and implementation
// borrows heavily from sinful.js: http://guipn.github.io/sinful.js/
/**
     * Array.prototype.reduce for browsers that don't support it
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility
     */
"function"!=typeof Array.prototype.reduce&&(Array.prototype.reduce=function(a,b){"use strict";if(null===this||"undefined"==typeof this)
// At the moment all modern browsers, that support strict mode, have
// native implementation of Array.prototype.reduce. For instance, IE8
// does not support strict mode, so this check is actually useless.
throw new TypeError("Array.prototype.reduce called on null or undefined");if("function"!=typeof a)throw new TypeError(a+" is not a function");var c,d,e=this.length>>>0,f=!1;for(1<arguments.length&&(d=b,f=!0),c=0;e>c;++c)this.hasOwnProperty(c)&&(f?d=a(d,this[c],c,this):(d=this[c],f=!0));if(!f)throw new TypeError("Reduce of empty array with no initial value");return d}),/************************************
        Numeral Prototype
    ************************************/
m.fn=a.prototype={clone:function(){return m(this)},format:function(a,b){return c(this,a?a:r,void 0!==b?b:Math.round)},unformat:function(a){return"[object Number]"===Object.prototype.toString.call(a)?a:d(this,a?a:r)},value:function(){return this._value},valueOf:function(){return this._value},set:function(a){return this._value=Number(a),this},add:function(a){function b(a,b,d,e){return a+c*b}var c=l.call(null,this._value,a);return this._value=[this._value,a].reduce(b,0)/c,this},subtract:function(a){function b(a,b,d,e){return a-c*b}var c=l.call(null,this._value,a);return this._value=[a].reduce(b,this._value*c)/c,this},multiply:function(a){function b(a,b,c,d){var e=l(a,b);return a*e*(b*e)/(e*e)}return this._value=[this._value,a].reduce(b,1),this},divide:function(a){function b(a,b,c,d){var e=l(a,b);return a*e/(b*e)}return this._value=[this._value,a].reduce(b),this},difference:function(a){return Math.abs(m(this._value).subtract(a).value())}},/************************************
        Exposing Numeral
    ************************************/
// CommonJS module is defined
s&&(module.exports=m),/*global ender:false */
"undefined"==typeof ender&&(
// here, `this` means `window` in the browser, or `global` on the server
// add `numeral` as a global object via a string identifier,
// for Closure Compiler 'advanced' mode
this.numeral=m),/*global define:false */
"function"==typeof define&&define.amd&&define([],function(){return m})}).call(this);